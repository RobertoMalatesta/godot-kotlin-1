// DO NOT EDIT, THIS FILE IS GENERATED FROM api.json
package godot

import godot.core.Godot
import kotlin.Int
import kotlinx.cinterop.CFunction
import kotlinx.cinterop.COpaquePointer
import kotlinx.cinterop.cstr
import kotlinx.cinterop.invoke
import kotlinx.cinterop.memScoped
import kotlinx.cinterop.reinterpret

open class UPNP internal constructor(
  _handle: COpaquePointer
) : Reference(_handle) {
  enum class UPNPResult(
    val value: Int
  ) {
    UPNP_RESULT_SUCCESS(0),

    UPNP_RESULT_NOT_AUTHORIZED(1),

    UPNP_RESULT_PORT_MAPPING_NOT_FOUND(2),

    UPNP_RESULT_INCONSISTENT_PARAMETERS(3),

    UPNP_RESULT_NO_SUCH_ENTRY_IN_ARRAY(4),

    UPNP_RESULT_ACTION_FAILED(5),

    UPNP_RESULT_SRC_IP_WILDCARD_NOT_PERMITTED(6),

    UPNP_RESULT_EXT_PORT_WILDCARD_NOT_PERMITTED(7),

    UPNP_RESULT_INT_PORT_WILDCARD_NOT_PERMITTED(8),

    UPNP_RESULT_REMOTE_HOST_MUST_BE_WILDCARD(9),

    UPNP_RESULT_EXT_PORT_MUST_BE_WILDCARD(10),

    UPNP_RESULT_NO_PORT_MAPS_AVAILABLE(11),

    UPNP_RESULT_CONFLICT_WITH_OTHER_MECHANISM(12),

    UPNP_RESULT_CONFLICT_WITH_OTHER_MAPPING(13),

    UPNP_RESULT_SAME_PORT_VALUES_REQUIRED(14),

    UPNP_RESULT_ONLY_PERMANENT_LEASE_SUPPORTED(15),

    UPNP_RESULT_INVALID_GATEWAY(16),

    UPNP_RESULT_INVALID_PORT(17),

    UPNP_RESULT_INVALID_PROTOCOL(18),

    UPNP_RESULT_INVALID_DURATION(19),

    UPNP_RESULT_INVALID_ARGS(20),

    UPNP_RESULT_INVALID_RESPONSE(21),

    UPNP_RESULT_INVALID_PARAM(22),

    UPNP_RESULT_HTTP_ERROR(23),

    UPNP_RESULT_SOCKET_ERROR(24),

    UPNP_RESULT_MEM_ALLOC_ERROR(25),

    UPNP_RESULT_NO_GATEWAY(26),

    UPNP_RESULT_NO_DEVICES(27),

    UPNP_RESULT_UNKNOWN_ERROR(28);
  }

  companion object {
    val UPNP_RESULT_ACTION_FAILED: Int = 5

    val UPNP_RESULT_CONFLICT_WITH_OTHER_MAPPING: Int = 13

    val UPNP_RESULT_CONFLICT_WITH_OTHER_MECHANISM: Int = 12

    val UPNP_RESULT_EXT_PORT_MUST_BE_WILDCARD: Int = 10

    val UPNP_RESULT_EXT_PORT_WILDCARD_NOT_PERMITTED: Int = 7

    val UPNP_RESULT_HTTP_ERROR: Int = 23

    val UPNP_RESULT_INCONSISTENT_PARAMETERS: Int = 3

    val UPNP_RESULT_INT_PORT_WILDCARD_NOT_PERMITTED: Int = 8

    val UPNP_RESULT_INVALID_ARGS: Int = 20

    val UPNP_RESULT_INVALID_DURATION: Int = 19

    val UPNP_RESULT_INVALID_GATEWAY: Int = 16

    val UPNP_RESULT_INVALID_PARAM: Int = 22

    val UPNP_RESULT_INVALID_PORT: Int = 17

    val UPNP_RESULT_INVALID_PROTOCOL: Int = 18

    val UPNP_RESULT_INVALID_RESPONSE: Int = 21

    val UPNP_RESULT_MEM_ALLOC_ERROR: Int = 25

    val UPNP_RESULT_NOT_AUTHORIZED: Int = 1

    val UPNP_RESULT_NO_DEVICES: Int = 27

    val UPNP_RESULT_NO_GATEWAY: Int = 26

    val UPNP_RESULT_NO_PORT_MAPS_AVAILABLE: Int = 11

    val UPNP_RESULT_NO_SUCH_ENTRY_IN_ARRAY: Int = 4

    val UPNP_RESULT_ONLY_PERMANENT_LEASE_SUPPORTED: Int = 15

    val UPNP_RESULT_PORT_MAPPING_NOT_FOUND: Int = 2

    val UPNP_RESULT_REMOTE_HOST_MUST_BE_WILDCARD: Int = 9

    val UPNP_RESULT_SAME_PORT_VALUES_REQUIRED: Int = 14

    val UPNP_RESULT_SOCKET_ERROR: Int = 24

    val UPNP_RESULT_SRC_IP_WILDCARD_NOT_PERMITTED: Int = 6

    val UPNP_RESULT_SUCCESS: Int = 0

    val UPNP_RESULT_UNKNOWN_ERROR: Int = 28

    fun new(): UPNP = memScoped {
      val fnPtr = checkNotNull(Godot.gdnative.godot_get_class_constructor)("UPNP".cstr.ptr)
      requireNotNull(fnPtr) { "No constructor found for UPNP" }
      val fn = fnPtr.reinterpret<CFunction<() -> COpaquePointer>>()
      UPNP(
        fn()
      )
    }}
}
